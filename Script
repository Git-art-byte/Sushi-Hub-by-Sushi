local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Squid Game X" .. Fluent.Version,
    SubTitle = "by Sushi",
    TabWidth = 160,
    Size = UDim2.fromOffset(600, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "home" }),
    Humanoid = Window:AddTab({ Title = "Humanoid", Icon = "user" }),
	Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

-- Notification
Fluent:Notify({
    Title = "Success",
    Content = "Successfully loaded Sushi Hub.",
    Duration = 5,
    Icon = "check"
})

-- Variable to store walk speed value
local walkSpeedValue = 16 -- Default walk speed

-- Input Field
local Input = Tabs.Humanoid:AddInput("WalkSpeedInput", {
    Title = "WalkSpeed",
    Default = 16, -- Default value
    Placeholder = "Enter a value",
    Numeric = true, -- Only allows numbers
    Finished = false, -- Calls callback when Enter is pressed
    Callback = function(Value)
        walkSpeedValue = tonumber(Value) or 16 -- Convert input to number, default to 16 if invalid
        print("WalkSpeed set to:", walkSpeedValue)
    end
})
-- Toggle to activate/deactivate walk speed change
local Toggle = Tabs.Humanoid:AddToggle("WalkSpeedToggle", {
    Title = "Activate Walkspeed",
    Default = false
})

-- Variable to store the walkspeed loop
local walkSpeedLoop = nil

Toggle:OnChanged(function()
    if Toggle.Value then
        -- Create a loop that constantly applies the walk speed
        walkSpeedLoop = game:GetService("RunService").Heartbeat:Connect(function()
            local player = game.Players.LocalPlayer
            if player and player.Character and player.Character:FindFirstChild("Humanoid") then
                player.Character.Humanoid.WalkSpeed = walkSpeedValue
            end
        end)
        print("WalkSpeed activated:", walkSpeedValue)
    else
        -- Disconnect the loop when toggle is off
        if walkSpeedLoop then
            walkSpeedLoop:Disconnect()
            walkSpeedLoop = nil
        end
        
        -- Reset to default speed
        local player = game.Players.LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.WalkSpeed = 16 -- Default walk speed
            print("WalkSpeed reset to default")
        end
    end
end)

-- Instead of AddDivider, use AddParagraph with empty content as a spacer
Tabs.Humanoid:AddParagraph("", "")

-- Variable to store jump power value
local jumpPowerValue = 50 -- Default jump power

-- Input Field for JumpPower
local JumpInput = Tabs.Humanoid:AddInput("JumpPowerInput", {
    Title = "JumpPower",
    Default = 50, -- Default value
    Placeholder = "Enter a value",
    Numeric = true, -- Only allows numbers
    Finished = false, -- Calls callback when Enter is pressed
    Callback = function(Value)
        jumpPowerValue = tonumber(Value) or 50 -- Convert input to number, default to 50 if invalid
        print("JumpPower set to:", jumpPowerValue)
    end
})

-- Toggle to activate/deactivate jump power change
local JumpToggle = Tabs.Humanoid:AddToggle("JumpPowerToggle", {
    Title = "Activate JumpPower",
    Default = false
})

-- Variable to store the jump power loop
local jumpPowerLoop = nil

JumpToggle:OnChanged(function()
    if JumpToggle.Value then
        -- Create a loop that constantly applies the jump power
        jumpPowerLoop = game:GetService("RunService").Heartbeat:Connect(function()
            local player = game.Players.LocalPlayer
            if player and player.Character and player.Character:FindFirstChild("Humanoid") then
                player.Character.Humanoid.JumpPower = jumpPowerValue
            end
        end)
        print("JumpPower activated:", jumpPowerValue)
    else
        -- Disconnect the loop when toggle is off
        if jumpPowerLoop then
            jumpPowerLoop:Disconnect()
            jumpPowerLoop = nil
        end
        
        -- Reset to default jump power
        local player = game.Players.LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.JumpPower = 50 -- Default jump power
            print("JumpPower reset to default")
        end
    end
end)

--Settings
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

SaveManager:LoadAutoloadConfig()
